// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  userName      String?
  role          String?   @default("user")
  email         String?   @unique
  password      String?
  bio           String?
  friends       String?
  field1        String
  field2        String
  provider      String?   @default("b2Xclusive")
  socials       Json?
  passwordReset Boolean?  @default(false)
  otp           String?
  otpExpiryTime DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  imageId Int? @unique

  image           Image?            @relation(fields: [imageId], references: [id])
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  events          Event[]
  artist          Artist[]
  videos          Video[]
  audios          Audio[]
  track           Track[]
  videoViews      VideoViews[]
  postViews       PostViews[]
  audioTrackViews AudioTrackViews[]
}

model Image {
  id          Int     @id @default(autoincrement())
  publicId    String  @unique
  url         String
  format      String?
  version     String?
  placeholder String?

  // Relationships
  users  User[]
  events Event[]
  albums Album[]
  artist Artist[]
  posts  Post[]   @relation("ImageToPost")
}

model Artist {
  id        Int      @id @default(autoincrement())
  name      String
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId  Int?
  imageId Int? @unique

  albums Album[]
  audeos Audio[]
  videos Video[]
  track  Track[]

  image Image? @relation(fields: [imageId], references: [id])
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Album {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  releaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  imageId Int? @unique

  coverImage Image?  @relation(fields: [imageId], references: [id])
  artist     Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId   Int
  tracks     Track[]
}

model Track {
  id          Int      @id @default(autoincrement())
  title       String
  duration    String?
  description String?
  audioUrl    String?
  publicId    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  albumId  Int?
  artistId Int?
  userId   Int

  likes Like[]
  views AudioTrackViews[]

  album  Album?  @relation(fields: [albumId], references: [id])
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  location    String?
  organisers  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId  Int?
  image   Image[]
  likes   Like[]
  comment Comment[]

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  subtitle    String?
  categories  String[]
  tags        String[]
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships

  authorId Int

  author  User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment Comment[]
  likes   Like[]
  image   Image[]     @relation("ImageToPost")
  views   PostViews[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships

  postId  Int?
  eventId Int?
  videoId Int?
  audioId Int?
  userId  Int?

  post  Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  video Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)
  audio Audio? @relation(fields: [audioId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  postId  Int?
  userId  Int
  videoId Int?
  audioId Int?
  eventId Int?
  trackId Int?

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post  Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  video Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)
  audio Audio? @relation(fields: [audioId], references: [id], onDelete: Cascade)
  track Track? @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

model Video {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  duration    String?
  videoUrl    String?
  publicId    String   @unique
  categories  String[]
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  artistId Int?
  userId   Int

  artist Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]
  views    VideoViews[]
}

model Audio {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  audioUrl    String?
  publicId    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  artistId Int?
  userId   Int

  artist Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]
}

// Views tracking tables
model VideoViews {
  id        Int      @id @default(autoincrement())
  videoId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  video Video @relation(fields: [videoId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model AudioTrackViews {
  id        Int      @id @default(autoincrement())
  audioId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  audio Track @relation(fields: [audioId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model PostViews {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
