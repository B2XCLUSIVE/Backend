// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userName      String?
  role          String?   @default("user")
  email         String?   @unique
  password      String?
  bio           String?
  provider      String?   @default("b2Xclusive")
  socials       Json?
  passwordReset Boolean?  @default(false)
  otp           String?
  otpExpiryTime DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  imageId String? @db.ObjectId

  image           Image?            @relation(fields: [imageId], references: [id])
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  events          Event[]
  artist          Artist[]
  videos          Video[]
  audios          Audio[]
  track           Track[]
  videoViews      VideoViews[]
  postViews       PostViews[]
  audioTrackViews AudioTrackViews[]
  organiser       Organiser[]
}

model Image {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  publicId    String  @unique
  url         String
  format      String?
  version     String?
  placeholder String?

  // Relationships
  users    User[]
  events   Event[]  @relation(fields: [eventIds], references: [id])
  eventIds String[] @db.ObjectId
  albums   Album[]
  artist   Artist[]
  posts    Post[]   @relation("ImageToPost", fields: [postIds], references: [id])
  postIds  String[] @db.ObjectId
  Video    Video[]
  Track    Track[]

  Audio     Audio[]
  organiser Organiser[]
}

model Artist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId  String  @db.ObjectId
  imageId String? @db.ObjectId

  albums Album[]
  audeos Audio[]
  videos Video[]
  track  Track[]

  image Image? @relation(fields: [imageId], references: [id])
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Album {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  releaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  imageId String? @unique @db.ObjectId

  coverImage Image?  @relation(fields: [imageId], references: [id])
  artist     Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId   String  @db.ObjectId
  tracks     Track[]
}

model Track {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subTitle    String?
  duration    String?
  description String?
  audioUrl    String?
  publicId    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  albumId  String?           @db.ObjectId
  artistId String?           @db.ObjectId
  userId   String            @db.ObjectId
  imageId  String?           @db.ObjectId
  likes    Like[]
  views    AudioTrackViews[]

  image  Image?  @relation(fields: [imageId], references: [id])
  album  Album?  @relation(fields: [albumId], references: [id])
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subTitle    String?
  description String?
  date        DateTime
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId     String      @db.ObjectId
  image      Image[]     @relation(fields: [imageIds], references: [id])
  imageIds   String[]    @db.ObjectId
  likes      Like[]
  comments   Comment[]
  organisers Organiser[] @relation(fields: [imageIds], references: [id])

  user         User?    @relation(fields: [organiserIds], references: [id], onDelete: Cascade)
  organiserIds String[] @db.ObjectId
}

model Organiser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String  @db.ObjectId
  imageId String? @unique @db.ObjectId

  events   Event[]  @relation(fields: [eventIds], references: [id])
  eventIds String[] @db.ObjectId

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  image Image? @relation(fields: [imageId], references: [id])
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle    String?
  categories  String[]
  tags        String[]
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships

  authorId String @db.ObjectId

  author  User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment Comment[]
  likes   Like[]
  image   Image[]     @relation("ImageToPost", fields: [postIds], references: [id])
  postIds String[]    @db.ObjectId
  views   PostViews[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships

  postId  String? @db.ObjectId
  eventId String? @db.ObjectId
  videoId String? @db.ObjectId
  audioId String? @db.ObjectId
  userId  String? @db.ObjectId

  post  Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  video Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)
  audio Audio? @relation(fields: [audioId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  postId  String? @db.ObjectId
  userId  String  @db.ObjectId
  videoId String? @db.ObjectId
  audioId String? @db.ObjectId
  eventId String? @db.ObjectId
  trackId String? @db.ObjectId

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post  Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  video Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)
  audio Audio? @relation(fields: [audioId], references: [id], onDelete: Cascade)
  track Track? @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subTitle    String?
  description String?
  duration    String?
  videoUrl    String?
  publicId    String   @unique
  categories  String[]
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  artistId String? @db.ObjectId
  imageId  String? @db.ObjectId
  userId   String  @db.ObjectId

  thumbnail Image?  @relation(fields: [imageId], references: [id])
  artist    Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]
  views    VideoViews[]
}

model Audio {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  audioUrl    String?
  publicId    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  artistId String? @db.ObjectId
  userId   String  @db.ObjectId

  artist Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]
  Image    Image?    @relation(fields: [imageId], references: [id])
  imageId  String?   @db.ObjectId
}

// Views tracking tables
model VideoViews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId   String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  video Video @relation(fields: [videoId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model AudioTrackViews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  audioId   String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  audio Track @relation(fields: [audioId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model PostViews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
